#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('tumbleweedserverside:server')
const http = require('http')
const https = require('https')
const fs = require('fs')
const path = require('path')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '80')
const sslPort = normalizePort(process.env.PORT || '443')
app.set('port', port)
app.set('sslPort', sslPort)

 /**
 * Config SSL Cer.
 */

const keyPath = path.join(__dirname, './sslCer/server-key.pem')
const caPath = path.join(__dirname, './sslCer/ca-cert.pem')
const certPath = path.join(__dirname, './sslCer/server-cert.pem')

const httpsOption = {
  key: fs.readFileSync(keyPath, 'utf8'),
  ca: fs.readFileSync(caPath, 'utf8'),
  cert: fs.readFileSync(certPath, 'utf8')
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const sslServer = https.createServer(httpsOption, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
 
sslServer.listen(sslPort)
sslServer.on('error', onError)
sslServer.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
